<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>EasyLabel Dashboard</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />
    <style>
      * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        font-family: Arial, sans-serif;
      }

      body {
        display: flex;
        height: 100vh;
        background-color: #f4f4f9;
      }

      /* Sidebar */
      .sidebar {
        width: 250px;
        background-color: #2c3e50;
        color: white;
        padding: 20px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
      }

      .sidebar h1 {
        font-size: 24px;
        margin-bottom: 30px;
      }

      .nav-links a {
        display: block;
        color: white;
        text-decoration: none;
        font-size: 18px;
        margin: 10px 0;
        padding: 10px;
        border-radius: 5px;
        transition: background-color 0.3s;
      }

      .nav-links a:hover {
        background-color: #34495e;
      }

      /* Main content */
      .main-content {
        flex: 1;
        padding: 40px;
        overflow-y: auto;
      }

      /* Tabs */
      .tab-content {
        display: none;
      }

      .tab-content.active {
        display: block;
      }

      /* Form Styling */
      form {
        background-color: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      label {
        display: block;
        margin: 15px 0 5px;
        font-weight: bold;
      }

      input[type="text"],
      input[type="checkbox"] {
        padding: 10px;
        font-size: 16px;
        width: 100%;
        border: 1px solid #ccc;
        border-radius: 5px;
      }

      button {
        padding: 10px 20px;
        background-color: #2980b9;
        color: white;
        font-size: 16px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
      }

      button:hover {
        background-color: #3498db;
      }

      #users {
    border: 1px solid #ccc;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0px 4px 12px rgba(0, 0, 0, 0.1);
    background-color: #f9f9f9;
    max-width: 800px;
    margin: 0 auto;
    }

    h2 {
        color: #333;
        font-size: 24px;
        text-align: center;
        margin-bottom: 20px;
    }

    /* Filter Section */
    #users div {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 20px;
        flex-wrap: wrap;
    }

    label {
    font-weight: bold;
    margin-right: 10px;
    font-size: 16px;
    }

    input[type="date"] {
    padding: 5px 10px;
    border-radius: 5px;
    border: 1px solid #ccc;
    font-size: 14px;
    }

    button {
    padding: 10px 15px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    font-size: 14px;
    cursor: pointer;
    transition: background-color 0.2s ease-in-out;
    margin-top: 10px;
    }

    button:hover {
    background-color: #0056b3;
    }

    /* User List Table */
    #user-list table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
    font-size: 14px;
    background-color: white;
    border-radius: 5px;
    overflow: hidden;
    }

    #user-list th,
    #user-list td {
    border: 1px solid #ddd;
    padding: 10px;
    text-align: left;
    }

    #user-list th {
    background-color: #007bff;
    color: white;
    font-weight: bold;
    }

    #user-list tr:nth-child(even) {
    background-color: #f2f2f2;
    }

    #user-list tr:hover {
    background-color: #e6f7ff;
    }

    /* General Sidebar Styling */
    .sidebar {
        width: 250px;
        height: 100vh;
        background-color: #2c3e50;
        padding: 20px;
        box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
        color: white;
        font-family: 'Arial', sans-serif;
    }

    /* Sidebar Title */
    .sidebar h1 {
        font-size: 24px;
        font-weight: bold;
        margin-bottom: 30px;
        color: #ecf0f1;
        text-align: center;
    }

    /* Navigation Links */
    .nav-links {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .nav-links a {
        text-decoration: none;
        color: #bdc3c7;
        font-size: 18px;
        padding: 12px;
        border-radius: 8px;
        transition: background-color 0.3s ease, color 0.3s ease;
        text-align: center;
        font-weight: 500;
    }

    /* Hover Effects */
    .nav-links a:hover {
        background-color: #34495e;
        color: #ffffff;
    }

    /* Active Tab Styling */
    .nav-links a.active {
        background-color: #1abc9c;
        color: #ffffff;
        font-weight: bold;
    }
    </style>
  </head>
  <body>
    <div class="sidebar">
      <h1>EasyLabel</h1>
      <div class="nav-links">
        <a href="/orderspage" id="orders-tab">Orders</a>
        <a href="#" id="app-version-tab" onclick="showTab('app-version')">App Version</a>
        <a href="#" id="show-ad-tab" onclick="showTab('show-ad')">Show AD</a>
        <a href="#" id="templates-tab" onclick="showTab('templates')">Templates</a>
        <a href="#" id="users-tab" onclick="showTab('users')">Users</a>
      </div>
    </div>

    <div class="main-content">
      <!-- App Version Tab -->
      <div id="app-version" class="tab-content">
        <h2>Manage App Versions</h2>
        <br />
        <!-- Display latest app version -->
        <div id="latest-version-container">
          <strong>Latest App Version:</strong>
          <span id="latest-app-version">Fetching...</span>
          <span id="latest-force-update">(Fetching...)</span>
        </div>
        <br />
        <!-- Form to update app version -->
        <form id="update-version-form">
          <label for="appVersion">App Version:</label>
          <input type="text" id="appVersion" name="appVersion" required />

          <label for="isForce">Force Update:</label>
          <input type="checkbox" id="isForce" name="isForce" />

          <!-- <button type="submit">Submit</button> -->
        </form>
      </div>

      <script>
        // Fetch the latest app version and pre-fill the form
        fetch("/api/appversion/latest")
          .then((response) => response.json())
          .then((data) => {
            if (data.appVersion) {
              document.getElementById("latest-app-version").textContent =
                data.appVersion;
              document.getElementById("latest-force-update").textContent =
                data.isForce === "true"
                  ? " (Force Update Enabled)"
                  : " (No Force Update)";

              // Pre-fill the form fields
              document.getElementById("appVersion").value = data.appVersion;
              document.getElementById("isForce").checked =
                data.isForce === "true";
            }
          })
          .catch(() => {
            document.getElementById("latest-app-version").textContent =
              "Error fetching latest version.";
          });

        // Handle form submission
        document
          .getElementById("update-version-form")
          .addEventListener("submit", function (e) {
            e.preventDefault();

            const appVersion = document.getElementById("appVersion").value;
            const isForce = document.getElementById("isForce").checked
              ? "true"
              : "false";

            fetch("/api/appversion/update-latest", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                appVersion,
                isForce,
              }),
            })
              .then((response) => response.json())
              .then((data) => {
                if (data.message) {
                  alert(data.message); // Show response message in alert
                } else {
                  alert("An error occurred while updating the app version.");
                }
              })
              .catch(() => {
                alert("An error occurred. Please try again.");
              });
          });
      </script>

      <!-- Show AD Tab -->
      <div id="show-ad" class="tab-content">
        <h2>Show Advertisement</h2>
        <br />

        <!-- Form to Add or Update Ads -->
        <form id="uploadAdForm" enctype="multipart/form-data">
          <label for="adImage">Ad Image:</label>
          <input
            type="text"
            id="adImage"
            name="adImage"
            placeholder="Enter a URL for the ad Image"
            required
          />
          <label for="adLink">Ad Link:</label>
          <input
            type="text"
            id="adLink"
            name="adLink"
            placeholder="Enter a URL for the ad"
            required
          />
          <br /><br />
          <input type="hidden" id="adId" name="adId" />
          <button type="submit">Upload</button>
        </form>

        <!-- <hr /> -->

        <!-- Section to Display Ads -->
        <br/>
        <h3>Current Advertisements</h3>
        <br/>
        <div id="adList"></div>
      </div>

      <script>
        // Add styling dynamically
        const style = document.createElement("style");
        style.innerHTML = `
            .ad-item {
            display: flex;
            align-items: center;
            border: 1px solid #ddd;
            border-radius: 8px;
            padding: 16px;
            margin-bottom: 12px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            background-color: #f9f9f9;
            }

            .ad-item img {
            border-radius: 8px;
            margin-right: 16px;
            max-width: 150px;
            height: auto;
            }

            .ad-details {
            flex: 1;
            }

            .ad-details a {
            color: #007BFF;
            text-decoration: none;
            font-weight: bold;
            }

            .ad-details a:hover {
            text-decoration: underline;
            }

            .ad-item button {
            padding: 8px 12px;
            margin-right: 8px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            }

            .ad-item button.edit-btn {
            background-color: #4CAF50;
            color: white;
            }

            .ad-item button.delete-btn {
            background-color: #FF4B4B;
            color: white;
            }

            .ad-item button:hover {
            opacity: 0.9;
            }

            .styled-table {
            width: 100%;
            border-collapse: collapse;
            font-family: Arial, sans-serif;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            margin-top: 16px;
        }

        .styled-table th,
        .styled-table td {
            padding: 12px;
            border: 1px solid #ddd;
            text-align: left;
        }

        .styled-table th {
            background-color: #f4f4f4;
            font-weight: bold;
        }

        .styled-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }

        .styled-table tr:hover {
            background-color: #f1f1f1;
        }

        .edit-btn {
            background-color: #4CAF50;
            color: white;
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }

        .delete-btn {
            background-color: #FF4B4B;
            color: white;
            padding: 8px 12px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }

        .edit-btn:hover,
        .delete-btn:hover {
            opacity: 0.9;
        }
        `;
        document.head.appendChild(style);

        // Fetch and display ads
        function fetchAds() {
            fetch("/api/showad")
            .then((response) => response.json())
            .then((data) => {
                const adList = document.getElementById("adList");
                adList.innerHTML = ""; // Clear previous content

                data.response.forEach((ad) => {
                const adDiv = document.createElement("div");
                adDiv.classList.add("ad-item");
                adDiv.innerHTML = `
                    <div class="ad-details">
                    <p>Image Link: <a href="${ad.image_url}" target="_blank">${ad.image_url}</a></p>
                    <p>Ad Link: <a href="${ad.target_url}" target="_blank">${ad.target_url}</a></p>
                    </div>
                    <div>
                    <button class="edit-btn" onclick="editAd('${ad._id}', '${ad.target_url}', '${ad.image_url}')">Edit</button>
                    <button class="delete-btn" onclick="deleteAd('${ad._id}')">Delete</button>
                    </div>
                `;
                adList.appendChild(adDiv);
                });
            })
            .catch((error) => {
                alert("Failed to fetch ads: " + error.message);
            });
        }

        // Populate form for editing an ad
        function editAd(adId, adLink, adImage) {
          document.getElementById("adId").value = adId;
          document.getElementById("adLink").value = adLink;
          document.getElementById("adImage").value = adImage; // Clear file input (browser security)
        }

        // Delete an ad
        function deleteAd(adId) {
          fetch(`/api/showad/delete`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({ ShowAdID: adId }),
          })
            .then((response) => response.json())
            .then((data) => {
              alert(data.message || "Ad deleted successfully!");
              fetchAds(); // Refresh the ad list
            })
            .catch((error) => {
              alert("Failed to delete ad: " + error.message);
            });
        }

        // Handle form submission for adding/updating ads
        document.getElementById("uploadAdForm").addEventListener("submit", async (event) => {
            event.preventDefault();

            const adLink = document.getElementById("adLink").value;
            const adId = document.getElementById("adId").value;
            const adImage = document.getElementById("adImage").value; // Get the uploaded image file

            if (!adImage) {
                alert("Please select an image.");
                return;
            }

            const requestData = {
                target_url: adLink,
                image_url: adImage, // Send image URL instead of file
            };

            if (adId) {
                requestData.ShowAdID = adId; // Include ID only if updating
            }

            const endpoint = adId ? "/api/showad/update" : "/api/showad/store";

            try {
                const response = await fetch(endpoint, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(requestData),
                });

                const data = await response.json();
                alert(data.message || "Ad saved successfully!");
                document.getElementById("uploadAdForm").reset();
                fetchAds();
            } catch (error) {
                alert("An error occurred: " + error.message);
            }
        });
        // Initial fetch of ads
        fetchAds();

      </script>

      <!-- Templates Tab Placeholder -->
    <div id="templates" class="tab-content active">
        <h2>Manage Templates</h2>
        <br />
        <!-- Form to Add or Update Templates -->
        <form id="templateForm">
          <label for="templateName">Template Name:</label>
          <input type="text" id="templateName" name="templateName" placeholder="Enter template name" required />
          <br /><br />
      
          <label for="mainCategory">Main Category:</label>
          <select id="mainCategory" name="mainCategory" required>
              <option value="" disabled selected>Select a Main Category</option>
              <option value="Commercial Retail">Commercial Retail</option>
              <option value="Work Scenarios">Work Scenarios</option>
              <option value="Festive Theme">Festive Theme</option>
              <option value="Home Storage">Home Storage</option>
          </select>
          <br /><br />
      
          <label for="templateCategory">Category:</label>
          <select id="templateCategory" name="templateCategory" required>
              <option value="" disabled selected>Select a Category</option>
          </select>
          <br /><br />
      
          <label for="jsonData">JSON Data:</label>
          <textarea id="jsonData" name="jsonData" rows="8" placeholder="Enter JSON data" required></textarea>
          <input type="hidden" id="templateId" name="templateId" />
          <br /><br />
      
          <button type="submit">Save Template</button>
      </form>
           
        <!-- Section to Display Templates -->
        <br/>
        <h3>Current Templates</h3>
        <br/>
        <input type="text" id="searchInput" placeholder="Search by name or category" oninput="filterTemplates()" />
        <br/><br/>
        <div id="templateList"></div>

    </div>

          
    <script>

function renderTemplates(templates) {
    const templateList = document.getElementById("templateList");
    templateList.innerHTML = ""; // Clear previous templates

    // Create a table element
    const table = document.createElement("table");
    table.style.width = "100%";
    table.style.borderCollapse = "collapse";
    table.classList.add("styled-table");
    
    table.innerHTML = `
        <thead>
        <tr>
            <th style="border: 1px solid #ddd; padding: 8px;">Name</th>
            <th style="border: 1px solid #ddd; padding: 8px;">Category</th>
            <th style="border: 1px solid #ddd; padding: 8px; ">JSON Data</th>
            <th style="border: 1px solid #ddd; padding: 8px;">Actions</th>
        </tr>
        </thead>
        <tbody></tbody>
    `;

    const tbody = table.querySelector("tbody");

    templates.forEach((template) => {
        const row = document.createElement("tr");
        row.innerHTML = `
        <td style="border: 1px solid #ddd; padding: 8px;">${template.name}</td>
        <td style="border: 1px solid #ddd; padding: 8px;">${template.templateCategory}</td>
        <td style="border: 1px solid #ddd; padding: 8px; max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
            ${template.jsonData}
        </td>
        <td style="border: 1px solid #ddd; padding: 8px;">
            <button class="edit-btn" onclick="editTemplate('${template._id}', '${template.name}', '${template.templateCategory}', '${encodeURIComponent(template.jsonData)}')">Edit</button>
            <button class="delete-btn" onclick="deleteTemplate('${template._id}')">Delete</button>
        </td>
        `;

        tbody.appendChild(row);
    });

    templateList.appendChild(table);
    }

    // Filter templates based on search input
    function filterTemplates() {
    const searchInput = document.getElementById("searchInput").value.toLowerCase();
    const filteredTemplates = allTemplates.filter((template) => 
        template.name.toLowerCase().includes(searchInput) || 
        template.templateCategory.toLowerCase().includes(searchInput)
    );
    renderTemplates(filteredTemplates); // Re-render the filtered templates
    }
    
      document.getElementById("mainCategory").addEventListener("change", function () {
          const categoryMap = {
              "Commercial Retail": [
                  "Bakery", "Drinking", "Clothing", "Fresh Food/Seafood", "Grocery Store", 
                  "Jewelry", "Gardening", "Digital Device", "Beauty & Personal Care", "Pet Supplies",
                  "Contact Information", "Catering Service"
              ],
              "Work Scenarios": [
                  "School", "Hospital", "Laboratory", "Asset Tag", "Name Tag", "Employee Activities"
              ],
              "Festive Theme": [
                  "New Year", "Greeting & Wishes", "Thanking Wishes", "Valentine Day", 
                  "Christmas", "Diwali"
              ],
              "Home Storage": [
                  "Kitchen Storage", "Other Storage", "Laundry"
              ]
          };
  
          const mainCategory = this.value;
          const templateCategory = document.getElementById("templateCategory");
  
          // Clear previous options
          templateCategory.innerHTML = '<option value="" disabled selected>Select a Category</option>';
  
          if (mainCategory in categoryMap) {
              categoryMap[mainCategory].forEach(category => {
                  const option = document.createElement("option");
                  option.value = category;
                  option.textContent = category;
                  templateCategory.appendChild(option);
              });
          }
      });
  </script>
  
    <script>
    let allTemplates = []; // Store all fetched templates

      function fetchTemplates() {
          const templateList = document.getElementById("templateList");

          // Show loading message while fetching templates
          templateList.innerHTML = "<p>Loading templates...</p>";

          fetch("/api/template")
              .then((response) => {
                  if (!response.ok) {
                      throw new Error(`HTTP error! Status: ${response.status}`);
                  }
                  return response.json();
              })
              .then((data) => {
                  templateList.innerHTML = ""; // Clear the loading message

                  allTemplates = data.data || []; // Store all templates

                  if (allTemplates.length === 0) {
                      templateList.innerHTML = "<p>No templates found.</p>";
                      return;
                  }

                  renderTemplates(allTemplates); // Render the initial template list
              })
              .catch((error) => {
                  templateList.innerHTML = `<p class="error">Failed to fetch templates: ${error.message}</p>`;
              });
      }

      function renderTemplates(templates) {
          const templateList = document.getElementById("templateList");
          templateList.innerHTML = ""; // Clear previous templates

          // Create a table element
          const table = document.createElement("table");
          table.style.width = "100%";
          table.style.borderCollapse = "collapse";
          table.classList.add("styled-table");
          
          table.innerHTML = `
              <thead>
              <tr>
                  <th style="border: 1px solid #ddd; padding: 8px;">Name</th>
                  <th style="border: 1px solid #ddd; padding: 8px;">Main Category</th>
                  <th style="border: 1px solid #ddd; padding: 8px;">Category</th>
                  <th style="border: 1px solid #ddd; padding: 8px;">JSON Data</th>
                  <th style="border: 1px solid #ddd; padding: 8px;">Actions</th>
              </tr>
              </thead>
              <tbody></tbody>
          `;

          const tbody = table.querySelector("tbody");

          templates.forEach((template) => {
              const row = document.createElement("tr");
              row.innerHTML = `
              <td style="border: 1px solid #ddd; padding: 8px;">${template.name}</td>
              <td style="border: 1px solid #ddd; padding: 8px;">${template.mainCategory}</td>
              <td style="border: 1px solid #ddd; padding: 8px;">${template.templateCategory}</td>
              <td style="border: 1px solid #ddd; padding: 8px; max-width: 200px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                  ${template.jsonData}
              </td>
              <td style="border: 1px solid #ddd; padding: 8px;">
                  <button class="edit-btn" onclick="editTemplate('${template._id}', '${template.name}', '${template.mainCategory}', '${template.templateCategory}', '${encodeURIComponent(template.jsonData)}')">Edit</button>
                  <button class="delete-btn" onclick="deleteTemplate('${template._id}')">Delete</button>
              </td>
              `;

              tbody.appendChild(row);
          });

          templateList.appendChild(table);
      }

// Delete a template
    function deleteTemplate(templateId) {
        fetch(`/api/template/delete`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ templateID: templateId }) // Using 'templateID' as per your format
        })
        .then((response) => {
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        })
        .then((data) => {
            alert(data.message || "Template deleted successfully!");
            fetchTemplates(); // Refresh the template list
        })
        .catch((error) => {
            console.error("Error response:", error);
            alert("Failed to delete template: " + error.message);
        });
    }

      // Populate form for editing a template
      function editTemplate(templateId, templateName, mainCategory, templateCategory, jsonData) {
          document.getElementById("templateId").value = templateId;
          document.getElementById("templateName").value = templateName;
          document.getElementById("mainCategory").value = mainCategory;
          document.getElementById("templateCategory").value = templateCategory;
          document.getElementById("jsonData").value = jsonData;
      }

      // Handle form submission for adding/updating templates
      document.getElementById("templateForm").addEventListener("submit", (event) => {
          event.preventDefault();

          const templateName = document.getElementById("templateName").value;
          const mainCategory = document.getElementById("mainCategory").value;
          const templateCategory = document.getElementById("templateCategory").value;
          const jsonData = document.getElementById("jsonData").value;
          const templateId = document.getElementById("templateId").value;

          const formData = {
              name: templateName,
              mainCategory: mainCategory,
              templateCategory: templateCategory,
              jsonData: jsonData,
          };
          if (templateId) formData.templateID = templateId;

          const endpoint = templateId ? "/api/template/update" : "/api/template/store";

          fetch(endpoint, {
              method: "POST",
              headers: {
                  "Content-Type": "application/json",
              },
              body: JSON.stringify(formData),
          })
          .then((response) => response.json())
          .then((data) => {
              alert(data.message || "Template saved successfully!");
              document.getElementById("templateForm").reset(); // Clear form
              fetchTemplates(); // Refresh the template list
          })
          .catch((error) => {
              alert("An error occurred: " + error.message);
          });
      });

      // Initial fetch of templates
      fetchTemplates();

    </script>

    <div id="users" class="tab-content">
        <h2>User List</h2>
        <div>
        <label for="from-date">From:</label>
        <input type="date" id="from-date" />
        <label for="to-date">To:</label>
        <input type="date" id="to-date" />
        <button onclick="filterUsers()">Filter</button>
        <button onclick="exportToExcel()">Export to Excel</button>
        </div>
        <div id="user-list"></div>
    </div>
  
    <script>
      function showTab(tabId) {
        const tabs = document.querySelectorAll(".tab-content");
        tabs.forEach((tab) => tab.classList.remove("active"));

        document.getElementById(tabId).classList.add("active");
        if (tabId === "users") {
            fetchUsers();
        }
      }

      //users
      function fetchUsers(from, to) {
            let url = "/api/users";
            if (from && to) {
                url += `?from=${from}&to=${to}`;
            }

            fetch(url)
            .then((response) => response.json())
            .then((data) => {
                if (!Array.isArray(data)) {
                throw new Error("Invalid response format. Expected an array.");
                }

                const userList = document.getElementById("user-list");
                userList.innerHTML = ""; // Clear previous content

                if (data.length === 0) {
                userList.innerHTML = "<p>No users found.</p>";
                return;
                }

                // Create table
                const table = document.createElement("table");
                table.style.width = "100%";
                table.style.borderCollapse = "collapse";

                table.innerHTML = `
                <thead>
                    <tr>
                    <th style="border: 1px solid #ddd; padding: 8px;">Name</th>
                    <th style="border: 1px solid #ddd; padding: 8px;">Email</th>
                    <th style="border: 1px solid #ddd; padding: 8px;">Phone</th>
                    </tr>
                </thead>
                <tbody></tbody>
                `;

                const tbody = table.querySelector("tbody");

                data.forEach((user) => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td style="border: 1px solid #ddd; padding: 8px;">${user.name}</td>
                    <td style="border: 1px solid #ddd; padding: 8px;">${user.email}</td>
                    <td style="border: 1px solid #ddd; padding: 8px;">${user.phone}</td>
                `;
                tbody.appendChild(row);
                });

                userList.appendChild(table);
            })
            .catch((error) => {
                alert("Failed to fetch users: " + error.message);
            });

        }
        // Filter users by date range
        function filterUsers() {
            const fromDate = document.getElementById("from-date").value;
            const toDate = document.getElementById("to-date").value;
            fetchUsers(fromDate, toDate);
        }

        // Export displayed users to Excel
        function exportToExcel() {
            const table = document.querySelector("#user-list table");
            if (!table) {
            alert("No data to export.");
            return;
            }

            let csv = [];
            const rows = table.querySelectorAll("tr");
            rows.forEach((row) => {
            const cells = row.querySelectorAll("th, td");
            const rowData = Array.from(cells).map((cell) => cell.innerText);
            csv.push(rowData.join(","));
            });

            // Create a CSV file
            const csvFile = new Blob([csv.join("\n")], { type: "text/csv" });
            const downloadLink = document.createElement("a");
            downloadLink.href = URL.createObjectURL(csvFile);
            downloadLink.download = "users.csv";
            downloadLink.click();
        }
    </script>
  </body>
</html>
